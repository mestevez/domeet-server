version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
        classpath "gradle.plugin.org.akhikhl.gretty:gretty:$gretty_version"
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
//apply plugin: 'org.akhikhl.gretty.internal.integrationTests.IntegrationTestPlugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // Jersey
    compile "org.glassfish.jersey.containers:jersey-container-servlet-core:$jersey_version"

    // Authentication
    compile "org.slf4j:slf4j-simple:$slf4j_version"

    // FreeMaker
    compile "org.freemarker:freemarker:$freemaker_version"

    // PosgreSQL Connector
    compile "org.postgresql:postgresql:$postgresql_version"

    // Junit dependencies
    testCompile("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_version")
}
junitPlatform {

    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // logManager 'org.apache.logging.log4j.jul.LogManager'
}

gretty {

    // supported values:
    // 'jetty7', 'jetty8', 'jetty9', 'jetty93', 'jetty94', 'tomcat7', 'tomcat8'
    servletContainer = 'jetty9'
    serverConfigFile = 'conf/jetty/jetty.xml'
    contextConfigFile  = 'src/main/webapp/WEB-INF/jetty-env.xml'

    realm 'auth'
    realmConfigFile 'conf/security/jetty-realm-dbms.properties'

    logbackConfigFile 'conf/logback.groovy'

    onStart {
        println 'Initialize gretty'
    }
}

task(ServerStartUp, dependsOn: 'classes', type: JavaExec) {
    args(['start'])
    description = 'Internal task execute before server application starts'
    main = 'gradle.Task'
    classpath = sourceSets.main.runtimeClasspath
}
project.afterEvaluate {
    tasks.appRun.dependsOn ServerStartUp
}

task(database, dependsOn: 'classes', type: JavaExec) {
    args(['database'])
    description = 'Database tasks. Allow parameteres: -create'
    main = 'gradle.Task'
    classpath = sourceSets.main.runtimeClasspath
}